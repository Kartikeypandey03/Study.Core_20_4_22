<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".InterviewPreparationSection"
    android:background="@drawable/overviewbackground">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">
    <TextView
        android:layout_width="match_parent"
        android:layout_height="50dp"
        android:fontFamily="sans-serif-condensed-medium"
        android:paddingTop="15dp"
        android:text="Interview Preparation Question"
        android:textAlignment="center"
        android:textColor="@color/white"
        android:textSize="25sp"
        />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="What is Java?"
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="@string/java_overview"
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="Why is Java a platform independent language?"
            android:textColor="@color/white"
            />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="Java language was developed in such a way that it does not depend on any hardware or software due to the fact that the compiler compiles the code and then converts it to platform-independent byte code which can be run on multiple systems"
            android:textColor="@color/white"
            android:textSize="20dp" />
        <TextView
            android:id="@+id/i1"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i1"
            android:textColor="@color/white"
            android:textSize="20dp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="Why is Java not a pure object oriented language?"
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="Java supports primitive data types - byte, boolean, char, short, int, float, long, and double and hence it is not a pure object oriented language."
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:id="@+id/i2"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i2"
            android:textColor="@color/white"
            android:textSize="20dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="Difference between Heap and Stack Memory in java. And how java utilizes this."
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="Stack memory is the portion of memory that was assigned to every individual program. And it was fixed. On the other hand, Heap memory is the portion that was not allocated to the java program but it will be available for use by the java program when it is required, mostly during the runtime of the program."
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:textColor="@color/white"
            android:textSize="20dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="Java Utilizes this memory as - "
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="-When we write a java program then all the variables, methods, etc are stored in the stack memory."
            android:textSize="20dp"
            android:textColor="@color/white" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="-And when we create any object in the java program then that object was created in the heap memory. And it was referenced from the stack memory."
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i3"
            android:id="@+id/i3"
            android:textColor="@color/white"
            android:textSize="20dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="Can java be said to be the complete object-oriented programming language?"
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="It is not wrong if we claim that java is the complete object-oriented programming language.\n Because Everything in Java is under the classes. And we can access that by creating the objects.\nBut also if we say that java is not a completely object-oriented programming language because it has the support of primitive data types like int, float, char, boolean, double, etc.\n
Now for the question:\n Is java a completely object-oriented programming language?\n We can say that - Java is not a pure object-oriented programming language, because it has direct access to primitive data types.\n And these primitive data types don't directly belong to the Integer classes."
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i4"
            android:id="@+id/i4"
            android:textColor="@color/white"
            android:textSize="20dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="How is Java different from C++?"
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="-C++ is only a  compiled language, whereas Java is compiled as well as an interpreted language.\n-Java programs are machine-independent whereas a c++ program can run only in the machine in which it is compiled. \n-C++ allows users to use pointers in the program. Whereas java doesn’t allow it. Java internally uses pointers.\n-C++ supports the concept of Multiple inheritances whereas Java doesn't support this. And it is due to avoiding the complexity of name ambiguity that causes the diamond problem."
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i5"
            android:id="@+id/i5"
            android:textColor="@color/white"
            android:textSize="20dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="Pointers are used in C/ C++. Why does Java not make use of pointers?"
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="Pointers are quite complicated and unsafe to use by beginner programmers. Java focuses on code simplicity, and the usage of pointers can make it challenging.\nPointer utilization can also cause potential errors. Moreover, security is also compromised if pointers are used because the users can directly access memory with the help of pointers.\nThus, a certain level of abstraction is furnished by not including pointers in Java.\nMoreover, the usage of pointers can make the procedure of garbage collection quite slow and erroneous. Java makes use of references as these cannot be manipulated, unlike pointers."
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i6"
            android:id="@+id/i6"
            android:textColor="@color/white"
            android:textSize="20dp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="What do you understand by an instance variable and a local variable?"
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="Instance variables are those variables that are accessible by all the methods in the class. They are declared outside the methods and inside the class.\n These variables describe the properties of an object and remain bound to it at any cost.\n"
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="Local variables are those variables present within a block, function, or constructor and can be accessed only inside them.\n The utilization of the variable is restricted to the block scope. Whenever a local variable is declared inside a method,\n the other class methods don’t have any knowledge about the local variable."
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i7"
            android:id="@+id/i7"
            android:textColor="@color/white"
            android:textSize="20dp" />


        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="What do you understand by data encapsulation?"
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="-Data Encapsulation is an Object-Oriented Programming concept of hiding the data attributes and their behaviours in a single unit.\n-It helps developers to follow modularity while developing software by ensuring that each object is independent of other objects by having its own methods, attributes, and functionalities.\n-It is used for the security of the private properties of an object and hence serves the purpose of data hiding."
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i9"
            android:id="@+id/i9"
            android:textColor="@color/white"
            android:textSize="20dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="Tell us something about JIT compiler."
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="-JIT stands for Just-In-Time and it is used for improving the performance during run time. It does the task of compiling parts of byte code having similar functionality at the same time thereby reducing the amount of compilation time for the code to run.\n-The compiler is nothing but a translator of source code to machine-executable code. But what is special about the JIT compiler? Let us see how it works:\n\n-First, the Java source code (.java) conversion to byte code (.class) occurs with the help of the javac compiler.\n-Then, the .class files are loaded at run time by JVM and with the help of an interpreter, these are converted to machine understandable code.\n-JIT compiler is a part of JVM. When the JIT compiler is enabled, the JVM analyzes the method calls in the .class files and compiles them to get more efficient and native code. It also ensures that the prioritized method calls are optimized.\n-Once the above step is done, the JVM executes the optimized code directly instead of interpreting the code again. This increases the performance and speed of the execution."
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i10"
            android:id="@+id/i10"
            android:textColor="@color/white"
            android:textSize="20dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="Can you tell the difference between equals() method and equality operator (==) in Java?"
            android:textColor="@color/white"
            />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i11"
            android:id="@+id/i11"
            android:textColor="@color/white"
            android:textSize="20dp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text=" How is an infinite loop declared in Java?"
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="Infinite loops are those loops that run infinitely without any breaking conditions. Some examples of consciously declaring infinite loop is:"
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i12"
            android:id="@+id/i12"
            android:textColor="@color/white"
            android:textSize="20dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="Briefly explain the concept of constructor overloading"
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="Constructor overloading is the process of creating multiple constructors in the class consisting of the same name with a difference in the constructor parameters.\n Depending upon the number of parameters and their corresponding types, distinguishing of the different types of constructors is done by the compiler."
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i13"
            android:id="@+id/i13"
            android:textColor="@color/white"
            android:textSize="20dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="Define Copy constructor in java."
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="Copy Constructor is the constructor used when we want to initialize the value to the new object from the old object of the same class. "
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i14"
            android:id="@+id/i14"
            android:textColor="@color/white"
            android:textSize="20dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="Can the main method be Overloaded?"
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="Yes, It is possible to overload the main method.\n We can create as many overloaded main methods we want.\n However, JVM has a predefined calling method that JVM will only call the main method with the definition of - "
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i15"
            android:id="@+id/i15"
            android:textColor="@color/white"
            android:textSize="20dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="Comment on method overloading and overriding by citing relevant examples."
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="In Java, method overloading is made possible by introducing different methods in the same class consisting of the same name.\n Still, all the functions differ in the number or type of parameters.\n It takes place inside a class and enhances program readability."
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="The only difference in the return type of the method does not promote method overloading. The following example will furnish you with a clear picture of it."
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i16"
            android:id="@+id/i16"
            android:textColor="@color/white"
            android:textSize="20dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="A single try block and multiple catch blocks can co-exist in a Java Program. Explain."
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="Yes, multiple catch blocks can exist but specific approaches should come prior to the general approach because only the first catch block satisfying the catch condition is executed.\n The given code illustrates the same:"
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i17"
            android:id="@+id/i17"
            android:textColor="@color/white"
            android:textSize="20dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="Explain the use of final keyword in variable, method and class."
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="In Java, the final keyword is used as defining something as constant /final and represents the non-access modifier."
            android:textSize="20dp"
            android:textColor="@color/white" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="final variable :"
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="When a variable is declared as final in Java, the value can’t be modified once it has been assigned.\nIf any value has not been assigned to that variable, then it can be assigned only by the constructor of the class"
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="final method :"
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="A method declared as final cannot be overridden by its children's classes.\nA constructor cannot be marked as final because whenever a class is inherited, the constructors are not inherited. Hence, marking it final doesn't make sense. Java throws compilation error saying - modifier final not allowed here"
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="final class :"
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="No classes can be inherited from the class declared as final. But that final class can extend other classes for its usage."
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i18"
            android:id="@+id/i18"
            android:textColor="@color/white"
            android:textSize="20dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="Do final, finally and finalize keywords have the same function?"
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="All three keywords have their own utility while programming.\n\nFinal: If any restriction is required for classes, variables, or methods, the final keyword comes in handy.\n Inheritance of a final class and overriding of a final method is restricted by the use of the final keyword.\n The variable value becomes fixed after incorporating the final keyword. \n\nFinally: It is the block present in a program where all the codes written inside it get executed irrespective of handling of exceptions.\n\nFinalize: Prior to the garbage collection of an object, the finalize method is called so that the clean-up activity is implemented."
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i19"
            android:id="@+id/i19"
            android:textColor="@color/white"
            android:textSize="20dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="20dp"
            android:textSize="22dp"
            android:textAlignment="center"
            android:textStyle="bold"
            android:text="Is it possible that the ‘finally’ block will not be executed? If yes then list the case."
            android:textColor="@color/white"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:text="Yes. It is possible that the ‘finally’ block will not be executed. The cases are-\n\nSuppose we use System.exit() in the above statement.\n\nIf there are fatal errors like Stack overflow, Memory access error, etc."
            android:textSize="20dp"
            android:textColor="@color/white" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i20"
            android:id="@+id/i20"
            android:textColor="@color/white"
            android:textSize="20dp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginLeft="12dp"
            android:layout_marginRight="10dp"
            android:fontFamily="@font/didact_gothic"
            android:paddingTop="15dp"
            android:textAlignment="center"
            android:text="@string/i21"
            android:id="@+id/i21"
            android:textColor="@color/white"
            android:textSize="20dp" />





    </LinearLayout>
</ScrollView>